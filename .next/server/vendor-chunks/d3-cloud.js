"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/d3-cloud";
exports.ids = ["vendor-chunks/d3-cloud"];
exports.modules = {

/***/ "(ssr)/./node_modules/d3-cloud/index.js":
/*!****************************************!*\
  !*** ./node_modules/d3-cloud/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\n// Algorithm due to Jonathan Feinberg, https://s3.amazonaws.com/static.mrfeinberg.com/bv_ch03.pdf\n\nconst dispatch = (__webpack_require__(/*! d3-dispatch */ \"(ssr)/./node_modules/d3-dispatch/src/index.js\").dispatch);\nconst RADIANS = Math.PI / 180;\nconst SPIRALS = {\n    archimedean: archimedeanSpiral,\n    rectangular: rectangularSpiral\n};\nconst cw = 1 << 11 >> 5;\nconst ch = 1 << 11;\nmodule.exports = function() {\n    var size = [\n        256,\n        256\n    ], text = cloudText, font = cloudFont, fontSize = cloudFontSize, fontStyle = cloudFontNormal, fontWeight = cloudFontNormal, rotate = cloudRotate, padding = cloudPadding, spiral = archimedeanSpiral, words = [], timeInterval = Infinity, event = dispatch(\"word\", \"end\"), timer = null, random1 = Math.random, cloud = {}, canvas = cloudCanvas;\n    cloud.canvas = function(_) {\n        return arguments.length ? (canvas = functor(_), cloud) : canvas;\n    };\n    cloud.start = function() {\n        var contextAndRatio = getContext(canvas()), board = zeroArray((size[0] >> 5) * size[1]), bounds = null, n = words.length, i = -1, tags = [], data = words.map(function(d, i) {\n            d.text = text.call(this, d, i);\n            d.font = font.call(this, d, i);\n            d.style = fontStyle.call(this, d, i);\n            d.weight = fontWeight.call(this, d, i);\n            d.rotate = rotate.call(this, d, i);\n            d.size = ~~fontSize.call(this, d, i);\n            d.padding = padding.call(this, d, i);\n            return d;\n        }).sort(function(a, b) {\n            return b.size - a.size;\n        });\n        if (timer) clearInterval(timer);\n        timer = setInterval(step, 0);\n        step();\n        return cloud;\n        function step() {\n            var start = Date.now();\n            while(Date.now() - start < timeInterval && ++i < n && timer){\n                var d = data[i];\n                d.x = size[0] * (random1() + .5) >> 1;\n                d.y = size[1] * (random1() + .5) >> 1;\n                cloudSprite(contextAndRatio, d, data, i);\n                if (d.hasText && place(board, d, bounds)) {\n                    tags.push(d);\n                    event.call(\"word\", cloud, d);\n                    if (bounds) cloudBounds(bounds, d);\n                    else bounds = [\n                        {\n                            x: d.x + d.x0,\n                            y: d.y + d.y0\n                        },\n                        {\n                            x: d.x + d.x1,\n                            y: d.y + d.y1\n                        }\n                    ];\n                    // Temporary hack\n                    d.x -= size[0] >> 1;\n                    d.y -= size[1] >> 1;\n                }\n            }\n            if (i >= n) {\n                cloud.stop();\n                event.call(\"end\", cloud, tags, bounds);\n            }\n        }\n    };\n    cloud.stop = function() {\n        if (timer) {\n            clearInterval(timer);\n            timer = null;\n        }\n        for (const d of words){\n            delete d.sprite;\n        }\n        return cloud;\n    };\n    function getContext(canvas) {\n        const context = canvas.getContext(\"2d\", {\n            willReadFrequently: true\n        });\n        canvas.width = canvas.height = 1;\n        const ratio = Math.sqrt(context.getImageData(0, 0, 1, 1).data.length >> 2);\n        canvas.width = (cw << 5) / ratio;\n        canvas.height = ch / ratio;\n        context.fillStyle = context.strokeStyle = \"red\";\n        return {\n            context,\n            ratio\n        };\n    }\n    function place(board, tag, bounds) {\n        var perimeter = [\n            {\n                x: 0,\n                y: 0\n            },\n            {\n                x: size[0],\n                y: size[1]\n            }\n        ], startX = tag.x, startY = tag.y, maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]), s = spiral(size), dt = random1() < .5 ? 1 : -1, t = -dt, dxdy, dx, dy;\n        while(dxdy = s(t += dt)){\n            dx = ~~dxdy[0];\n            dy = ~~dxdy[1];\n            if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n            tag.x = startX + dx;\n            tag.y = startY + dy;\n            if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\n            // TODO only check for collisions within current bounds.\n            if (!bounds || collideRects(tag, bounds)) {\n                if (!cloudCollide(tag, board, size[0])) {\n                    var sprite = tag.sprite, w = tag.width >> 5, sw = size[0] >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;\n                    for(var j = 0; j < h; j++){\n                        last = 0;\n                        for(var i = 0; i <= w; i++){\n                            board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n                        }\n                        x += sw;\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    cloud.timeInterval = function(_) {\n        return arguments.length ? (timeInterval = _ == null ? Infinity : _, cloud) : timeInterval;\n    };\n    cloud.words = function(_) {\n        return arguments.length ? (words = _, cloud) : words;\n    };\n    cloud.size = function(_) {\n        return arguments.length ? (size = [\n            +_[0],\n            +_[1]\n        ], cloud) : size;\n    };\n    cloud.font = function(_) {\n        return arguments.length ? (font = functor(_), cloud) : font;\n    };\n    cloud.fontStyle = function(_) {\n        return arguments.length ? (fontStyle = functor(_), cloud) : fontStyle;\n    };\n    cloud.fontWeight = function(_) {\n        return arguments.length ? (fontWeight = functor(_), cloud) : fontWeight;\n    };\n    cloud.rotate = function(_) {\n        return arguments.length ? (rotate = functor(_), cloud) : rotate;\n    };\n    cloud.text = function(_) {\n        return arguments.length ? (text = functor(_), cloud) : text;\n    };\n    cloud.spiral = function(_) {\n        return arguments.length ? (spiral = SPIRALS[_] || _, cloud) : spiral;\n    };\n    cloud.fontSize = function(_) {\n        return arguments.length ? (fontSize = functor(_), cloud) : fontSize;\n    };\n    cloud.padding = function(_) {\n        return arguments.length ? (padding = functor(_), cloud) : padding;\n    };\n    cloud.random = function(_) {\n        return arguments.length ? (random1 = _, cloud) : random1;\n    };\n    cloud.on = function() {\n        var value = event.on.apply(event, arguments);\n        return value === event ? cloud : value;\n    };\n    return cloud;\n};\nfunction cloudText(d) {\n    return d.text;\n}\nfunction cloudFont() {\n    return \"serif\";\n}\nfunction cloudFontNormal() {\n    return \"normal\";\n}\nfunction cloudFontSize(d) {\n    return Math.sqrt(d.value);\n}\nfunction cloudRotate() {\n    return (~~(random() * 6) - 3) * 30;\n}\nfunction cloudPadding() {\n    return 1;\n}\n// Fetches a monochrome sprite bitmap for the specified text.\n// Load in batches for speed.\nfunction cloudSprite(contextAndRatio, d, data, di) {\n    if (d.sprite) return;\n    var c = contextAndRatio.context, ratio = contextAndRatio.ratio;\n    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n    var x = 0, y = 0, maxh = 0, n = data.length;\n    --di;\n    while(++di < n){\n        d = data[di];\n        c.save();\n        c.font = d.style + \" \" + d.weight + \" \" + ~~((d.size + 1) / ratio) + \"px \" + d.font;\n        const metrics = c.measureText(d.text);\n        const anchor = -Math.floor(metrics.width / 2);\n        let w = (metrics.width + 1) * ratio;\n        let h = d.size << 1;\n        if (d.rotate) {\n            var sr = Math.sin(d.rotate * RADIANS), cr = Math.cos(d.rotate * RADIANS), wcr = w * cr, wsr = w * sr, hcr = h * cr, hsr = h * sr;\n            w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;\n            h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n        } else {\n            w = w + 0x1f >> 5 << 5;\n        }\n        if (h > maxh) maxh = h;\n        if (x + w >= cw << 5) {\n            x = 0;\n            y += maxh;\n            maxh = 0;\n        }\n        if (y + h >= ch) break;\n        c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n        if (d.rotate) c.rotate(d.rotate * RADIANS);\n        c.fillText(d.text, anchor, 0);\n        if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, anchor, 0);\n        c.restore();\n        d.width = w;\n        d.height = h;\n        d.xoff = x;\n        d.yoff = y;\n        d.x1 = w >> 1;\n        d.y1 = h >> 1;\n        d.x0 = -d.x1;\n        d.y0 = -d.y1;\n        d.hasText = true;\n        x += w;\n    }\n    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data, sprite = [];\n    while(--di >= 0){\n        d = data[di];\n        if (!d.hasText) continue;\n        var w = d.width, w32 = w >> 5, h = d.y1 - d.y0;\n        // Zero the buffer\n        for(var i = 0; i < h * w32; i++)sprite[i] = 0;\n        x = d.xoff;\n        if (x == null) return;\n        y = d.yoff;\n        var seen = 0, seenRow = -1;\n        for(var j = 0; j < h; j++){\n            for(var i = 0; i < w; i++){\n                var k = w32 * j + (i >> 5), m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;\n                sprite[k] |= m;\n                seen |= m;\n            }\n            if (seen) seenRow = j;\n            else {\n                d.y0++;\n                h--;\n                j--;\n                y++;\n            }\n        }\n        d.y1 = d.y0 + seenRow;\n        d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n    }\n}\n// Use mask-based collision detection.\nfunction cloudCollide(tag, board, sw) {\n    sw >>= 5;\n    var sprite = tag.sprite, w = tag.width >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;\n    for(var j = 0; j < h; j++){\n        last = 0;\n        for(var i = 0; i <= w; i++){\n            if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;\n        }\n        x += sw;\n    }\n    return false;\n}\nfunction cloudBounds(bounds, d) {\n    var b0 = bounds[0], b1 = bounds[1];\n    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n}\nfunction collideRects(a, b) {\n    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n}\nfunction archimedeanSpiral(size) {\n    var e = size[0] / size[1];\n    return function(t) {\n        return [\n            e * (t *= .1) * Math.cos(t),\n            t * Math.sin(t)\n        ];\n    };\n}\nfunction rectangularSpiral(size) {\n    var dy = 4, dx = dy * size[0] / size[1], x = 0, y = 0;\n    return function(t) {\n        var sign = t < 0 ? -1 : 1;\n        // See triangular numbers: T_n = n * (n + 1) / 2.\n        switch(Math.sqrt(1 + 4 * sign * t) - sign & 3){\n            case 0:\n                x += dx;\n                break;\n            case 1:\n                y += dy;\n                break;\n            case 2:\n                x -= dx;\n                break;\n            default:\n                y -= dy;\n                break;\n        }\n        return [\n            x,\n            y\n        ];\n    };\n}\n// TODO reuse arrays?\nfunction zeroArray(n) {\n    var a = [], i = -1;\n    while(++i < n)a[i] = 0;\n    return a;\n}\nfunction cloudCanvas() {\n    return document.createElement(\"canvas\");\n}\nfunction functor(d) {\n    return typeof d === \"function\" ? d : function() {\n        return d;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-cloud/index.js\n");

/***/ })

};
;